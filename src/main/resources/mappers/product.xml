<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="com.project.stussy.domain.product.ProductRepository">
  		<insert id="saveProduct" parameterType="com.project.stussy.domain.product.Product"
  			useGeneratedKeys="true" keyProperty="product_code">
  			insert into
  				product_mst
  			values(
  					0,
  			#{product_category},
			#{product_name},
			#{product_price},
			#{product_explanation},
			#{product_size},
			#{product_count},
			now(),
			now()
  			)
  		</insert>
  		
  		
  		<insert id="saveProductFiles" parameterType="java.util.List">
  			insert into
  				product_file
  			values
  				<foreach collection="list" item="file" separator=",">
  					(
  						0,
  						#{file.product_code},
  						#{file.file_name},
  						now(),
  						now()
  					)
  				</foreach>
  		</insert>
  	
  		
  		<select id="getProductList" parameterType="hashmap" resultType="com.project.stussy.domain.product.Product">
  				SELECT
					pm.product_code,
					pf.file_name,
					pm.product_category,
					pm.product_name,
					pm.product_price,
					pm.product_size,
					pm.product_explanation
				
				FROM
					product_mst pm
					LEFT OUTER JOIN product_file pf ON(pf.product_code = pm.product_code)
			order by
				product_code asc
			limit #{index}, 10;		
  		</select>
  		
  		<!-- east shopMain -->
  		<select id="getProductShopList" parameterType="Integer" resultType="com.project.stussy.domain.product.Product">
			SELECT
				pm.product_code,
				pm.product_name,
				pm.product_price,
				(select 
				   count(*)
				 from
				    product_mst
				 <!-- 검색카테고리 -->
				 <choose>
				 	<when test='search_falg == "title"'>
				 	
				 	</when>
				 	<when test='search_falg == "titleAndContent"'>
				 	
				 	</when>
				 	<when test='search_falg == "writer"'>
				 	
				 	</when>
				 </choose>   
				    
				 ) as total_product_count
			FROM
				product_mst pm
				LEFT OUTER JOIN product_file pf ON(pf.product_code = pm.product_code)
				<!-- 검색카테고리 -->
				 <choose>
				 	<when test='search_falg == "title"'>
				 	
				 	</when>
				 	<when test='search_falg == "titleAndContent"'>
				 	
				 	</when>
				 	<when test='search_falg == "writer"'>
				 	
				 	</when>
				 </choose> 
			order by
				product_code asc
			limit #{index}, 8;
  		</select>
  		
  		<!-- east -->
  		<select id="getProductDetailList" parameterType="hashmap" resultType="com.project.stussy.domain.product.Product">
  				SELECT
					pm.product_code,
					pf.file_name,
					pm.product_category,
					pm.product_name,
					pm.product_price,
					pm.product_size,
					pm.product_explanation
				
				FROM
					product_mst pm
					LEFT OUTER JOIN product_file pf ON(pf.product_code = pm.product_code)
				WHERE 
				<choose>
					<when test='flag == null'>
					  pm.product_code = #{product_code}
					</when>
					<when test='flag.equals("pre")'>
						pm.product_code = (
						  select
						     max(product_code)
						  from
						     product_mst
						  where
						     product_code &lt; #{product_code}
						)
					</when>
					<otherwise>
					  pm.product_code = (
						  select
						     min(product_code)
						  from
						     product_mst
						  where
						     product_code &gt; #{product_code}
						)
					</otherwise>
				</choose>
  		</select> 
  		
  		
  		<select id="getProductDetail" parameterType="Integer" resultType="com.project.stussy.domain.product.Product">
  			SELECT	
  			pm.product_code,
			pm.product_category,
			pm.product_size,
			pm.product_name,
			pm.product_price,
			pm.product_explanation,
			pf.file_name
		
		FROM
			product_mst pm
			LEFT OUTER JOIN product_file pf ON(pf.product_code = pm.product_code)
		where
			pm.product_code = #{product_code};
						
  		</select>
  		
  		
  		<update id="countIncrement" parameterType="hashmap">
		update
			product_mst
		set
			product_count = product_count + 1
		where
		<choose>
			<when test='flag == null'>
				product_count = #{product_count}
			</when>
			<when test='flag.equals("pre")'>
				product_count = (
					select
						max(product_count)
					from
						product_mst
					where
						product_count &lt; #{product_count}
				)
			</when>
			<otherwise> 
				product_count = (
					select
						min(product_count)
					from
						product_mst
					where
						product_count &gt; #{product_count}
				)
			</otherwise>
		</choose>
	</update>
	
	<delete id="remove" parameterType="Integer">
		delete
		from
			product_mst
		where
			product_code = #{product_code}
	</delete>
  		
  		
  </mapper>